# --------------------------------------------------------------------------
# Copyright 2024, XXXXX XXXXX, XXXXXXXXX XXXXXXXX XXXXXXXXXXX
# XXXXXXXX XXXXXXXXX XXXXXXXXXXXX
# All Rights Reserved
# Authors: XXXXX XXXXX, et al.
# See LICENSE file for the license information
# --------------------------------------------------------------------------

# This is the configuration file for the dynus package
dynus_node:

    ros__parameters:

        # Vehicle type
        vehicle_type: "uav"       # ["uav", "ground_robot", "qudruped_robot"]
        provide_goal_in_global_frame: true # [-] Provide goal in the global frame
        use_hardware: false      # [-] Use hardware
        
        # Sensor input
        use_lidar: true                 # [-] Use lidar
        use_depth_camera: true          # [-] Use depth camera

        # Flight mode (terminal_goal, exploration) Note: if we use exploration, "use_frontiers" should be true
        flight_mode: "terminal_goal"    # ["terminal_goal", "exploration"]
        use_frontiers: true                         # [-] Use frontiers

        # Visual (for real-world implementation, visual should be 0)
        visual_level: 2                 # [-] visual level (0: no visual, 1: minimal visual, 2: full visual)

        # Global & Local planner parameters
        planner_mode: "dynus"           # ["dynus"]
        plan_only_in_free_space: true   # [-] Plan only in free space - if true, the planner will plan only in free space
        use_free_space: true            # [-] Use free space for the global planner - if we want to use "safe" mode, this should be true
        
        # Gloabl planner parameters
        global_planner: "dgp"                           # ["sjps", "dastar", "dgp"] - "dgp": Dynus Global Planner (DGP), "sjps": Static JPS, "dastar": Dynamic A* without waiting option in motions
        factor_dgp: 1.0                                 # do not change - [m] actual_resolution = factor_dgp * (resolution of the map)
        inflation_dgp: 0.1                              # [m] The obstacles are inflated (to run DGP) by this amount
        free_inflation_dgp: 0.0                         # [m] The free space is inflated (to run DGP) by this amount
        x_min: -1000.0                                  # [m] x_min of the map - TODO: x_min, x_max, y_min, y_max doesn't limit the map size. It's only used for convext decomposition and gurobi solver's search range
        x_max: 1000.0                                   # [m] x_max of the map
        y_min: -1000.0                                  # [m] y_min of the map
        y_max: 1000.0                                   # [m] y_max of the map
        z_min: -10.0                                      # [m] points below this are considered ground
        z_max: 10.0                                      # [m] DGP is run with resolution=factor_dgp*(resolution of the map)
        use_raw_path: false                             # if true, the planner will return the raw path from DGP
        dgp_timeout_duration_ms: 10000                  # [ms] Timeout duration for the DGP
        use_free_start: true                            # [-] Use free start for the DGP
        free_start_factor: 1.0                           # [-] Factor for the free start
        use_free_goal: true                             # [-] Use free goal for the DGP
        free_goal_factor: 1.0                           # [-] Factor for the free goal
        delete_too_close_points_in_global_path: true    # [-] Delete too close points in the global path - recommended to be true for dynamic A*
        node_size_factor_for_occupied: 0.5              # [-] Node size factor for the occupied
        node_size_factor_for_free: 0.6                  # [-] Node size factor for the free cells
        use_z_axis_bottom_inflation: false              # [-] Use z axis bottom inflation for the global planner
        global_planner_huristic_weight: 1.0             # [-] Weight for the heuristic in the global planner

        # Path push visualization parameters (if we wanna visualize the path push - just flip all the flags)
        use_state_update: true                  # [-] Use ego-agent's state update - if false, we fix the ego-agent's state (this is useful for path push visualization)
        use_random_color_for_global_path: false # [-] Use random color for the global path - this is useful for path push visualization
        use_path_push_for_visualization: false  # [-] If true, we just do global planning and return true in replan() function. This is useful for the paper visualization.

        # Dynamic obstacle push parameters
        dyn_obst_global_planner_push_k: 0.3            # [-] push k for the global planner
        dyn_obst_global_planner_push_cov_p_alpha: 1.0   # [-] push cov_p alpha for the global planner
        dyn_obst_replusion_max: 0.5                     # [m] Maximum repulsion distance (per obstacle) for the dynamic obstacles

        # Static obstacle push parameters
        dist_discretization: 0.1                # [m] Distance discretization for the push
        max_dist_threshold_for_static_push: 4.0 # [m] Maximum distance threshold for the static push
        push_force_static: 0.3                  # [-] Push force for the static obstacles
        num_lookahead_global_path_for_push: 4   # [-] Number of global path to look ahead (from the end of the path[num_P])
        static_push_clustering_threshold: 0.5   # [m] Clustering threshold for the static push

        # Global planner benchmarking parameters
        use_benchmark: true                     # [-] Use global planner benchmarking
        file_path: "/media/XXXXXXX/T7/dynus/tro_paper/global_planner_benchmarking/csv/dgp/num_0.csv" # path to the file to save the data
        use_only_global_planner: false          # [-] Use only global planner for the benchmarking

        # Decomposition module parameters
        local_box_size: [2.0, 2.0, 2.0]         # [m] Size of the local box (smaller, faster)
        convex_decomp_use_uncertainty_diffusion_propagation: false # [-] Use uncertainty diffusion propagation for the convex decomposition
        min_dist_from_agent_to_traj: 3.0        # [m] Minimum distance from the agent to the trajectory
        use_shrinked_box: false                 # [-] Use shrinked box for the convex decomposition
        shrinked_box_size: 0.0                  # [m] Size of the shrinked box

        # Closed-form trajectory generation parameters
        closed_form_time_allocation_adj_iter_max: 5 # [-] Maximum number of iterations for the time allocation adjustment
        closed_form_initial_factor: 1.0            # [-] Initial factors for the closed-form trajectory generation
        closed_form_factor_increment: 0.1          # [-] Factor increment for the closed-form trajectory generation
        closed_form_factor_initial_decrement: 0.1          # [-] Factor decrement for the closed-form trajectory generation

        # Horizon adaptation parameters (not used)
        unknown_cells_weight: 0.5                # [-] Weight for the unknown
        dynamic_obsts_weight: 0.5                # [-] Weight for the dynamic obstacles
        dynamic_obsts_prox_weight: 0.5           # [-] Weight for the dynamic obstacles proximity
        dynamic_obsts_count_weight: 0.5          # [-] Weight for the dynamic obstacles count
        dynamic_obsts_total_max_num: 5           # [-] Total maximum number of dynamic obstacles
        max_horizon: 20.0                        # [m] Maximum horizon
        min_horizon: 5.0                         # [m] Minimum horizon
        risk_prox_min: 1.0                       # [m] Minimum risk proximity

        # P, N adaptation parameters
        p_n_mode: "dynus"                           # ["dynus", "const"]
        num_N: 4                                    # [-] Number of segments
        num_N_when_close_to_goal: 5                 # [-] Number of segments when close to the goal
        num_N_max: 6                                # [-] Maximum number of segments
        use_num_P_adaptation: true                  # [-] Use num_P adaptation
        num_P_min: 2                               # [-] Minimum number of polytope
        num_P_max: 3                                # [-] Maximum number of polytope
        num_replan_fail_threshold: 2                # [-] Number of replanning failure to switch to MIQP
        cool_down_duration: 2.0                     # [s] Cool down duration
        cool_down_duration_factor: 2.0              # [-] Cool down duration factor

        # v_max adaptation parameters
        use_v_max_adaptation: false                  # [-] Use v_max adaptation
        v_max_adaptation_v_min: 1.0                 # [m/s] Minimum velocity
        v_max_adaptation_p_min: 0.2                 # [-] Minimum p
        v_max_adaptation_p_max: 1.0                 # [-] Maximum p
        v_max_adaptation_obstacle_threshold: 3      # [-] # of dynamic obstacles for p_max

        # max_dist_vertexes adaptation parameters
        use_max_dist_vertexes_adaptation: false      # [-] Use max_dist_vertexes adaptation
        min_dist_vertexes: 0.5                      # [m] Minimum distance between two consecutive vertexes
        max_dist_vertexes: 1.5                      # [m] Maximum distance between two consecutive vertexes
        max_dist_vertexes_adaptation_obstacle_threshold: 3      # [-] # of dynamic obstacles for max_dist_vertexes
        max_dist_vertexes_adaptation_threshold: 5 # [m] Threshold for the max_dist_vertexes adaptation
        max_dist_vertexes_adaptation_decrease: 0.1 # [m] Decrease for the max_dist_vertexes adaptation

        # Local trajectory optimization parallelization parameters
        num_factors: 5                              # [-] Number of factors (odd number preferred)
        factor_increment: 0.3                       # [-] Factor increment
        min_factor: 0.1                             # [-] Minimum factor
        max_factor: 4.0 #not used                           # [-] Maximum factor

        # Optimization parameters
        horizon: 8.0                               # [m] Horizon
        optimization_type: "hard"                   # ["hard", "soft_without_check", "soft_with_check"]
        use_ref_points: true                       # [-] Use reference points in the QP optimization. If using MIQP, this will be ignored.
        num_ref_sample_points: 5                    # [-] Number of reference sample points
        dc: 0.01                                    # [s] Duration for the interpolation=Value of the timer pubGoal
        v_max: 2.0                                  # [m/s]  max velocity
        a_max: 3.0                                  # [m/s2] max acceleration
        j_max: 4.0                                  # [m/s3] max jerk
        gurobi_threads: 1                           # [-] Number of threads that Gurobi (both pos and yaw) will use. If 0, Gurobi will try to choose all the cores. If computer is maxed out, threads=1 works faster!
        num_obs_dist_samples: 5                     # [-] Number of samples for the obstacles distance
        control_cost_weight: 0.001                   # [-] Weight of the control cost in the optimization
        dynamic_weight: 10.0                        # [-] Weight of the obstacles and agents distance in the optimization
        final_pos_weight: 1000.0                    # [-] Weight of the final state in the optimization
        final_vel_weight: 10.0                     # [-] Weight of the final velocity in the optimization
        final_acc_weight: 10.0                     # [-] Weight of the final acceleration in the optimization
        final_yaw_cost_weight: 10.0                 # [-] Weight of the final yaw cost in the optimization
        total_yaw_diff_weight: 10.0                 # [-] Weight of the total yaw difference in the optimization
        ref_point_weight: 100.0                       # [-] Weight of the reference point in the optimization
        collision_clearance: 10.0                    # [m] Minimum distance to activate soft constraints between the drone and the obstacles
        use_hard_dynamic_constraints: true          # [-] Use hard dynamic constraints
        use_hard_constr_for_final_state: true      # [-] Use hard constraints for the final position
        use_hard_constr_for_final_yaw: false        # [-] Use hard constraints for the final yaw
        drone_bbox: [0.1, 0.1, 0.1]                 # [m] Size of the bounding box for the obstacles
        goal_radius: 0.5                            # [m] Radius of the goal
        goal_seen_radius: 3.0                       # [m] Radius of the goal that the drone can see and stop replanning. Note that if this number is too small, the trajectory planning becomes extremely difficult.
        dist_to_switch_to_g_term: 3.0               # [m] Distance to switch to the g_term

        # Safe paths parameters
        num_safe_paths: 15                     # [-] Number of safe paths to discretize
        min_num_safe_paths: 3                     # [-] Minimum number of safe paths
        min_safe_path_distance: 0.3                     # [m] Distance to stop the drone
        max_safe_path_distance: 0.6                     # [m] Distance to stop the drone

        # Contingency paths parameters
        contingency_lateral_offset: 0.5                         # [m] Lateral offset (how far from the center goal to other goals) for the contingency paths

        # Dynamic obstacle parameters
        traj_lifetime: 5.0                          # [s] Time to keep the trajectory
        tracking_distance_threshold: 10.0           # [m] Distance threshold for the tracking
        alpha_cov: 1.0                              # [-] Alpha for the covariance inflation for dynamic obstacles (inflation = bbox + alpha_cov * ekf_cov_p) See map_util.hpp's updateDynamicMapFromTrajs() for more details
        max_dynamic_obstacle_inflation: 0.5         # [m] Inflation for the dynamic obstacles
        freq_dynamic_obstacle_update_to_tmap: 10.0   # [Hz] Frequency to update the dynamic obstacles to the tmap

        # Dynamic k_value parameters
        num_replanning_before_adapt: 10             # [-] Number of replanning before adapting the k_value
        default_k_value: 50                         # [-] Default k_value at the end of the trajectory
        alpha_k_value_filtering: 0.9               # [-] Alpha for the k_value adaptation
        k_value_factor: 2.0                         # [-] Factor for the k_value adaptation

        # Yaw-related parameters
        use_initial_yawing: false               # [-] Use initial yawing
        use_yaw: true                           # [-] Use yaw
        alpha_filter_yaw: 0.85                 # [-] Filter parameter for yaw, \in [0,1]. Higher--> More aggressive filtering
        alpha_filter_dyaw: 0.85                 # [-] Filter parameter for dyaw, \in [0,1]. Higher--> More aggressive filtering
        w_max: 4.0                              # [rd/s] Maximum angular velocity. ~4.0 for Hardware
        yaw_collision_weight: 10.0             # [-] Weight for the yaw collision likelihood
        yaw_time_weight: 0.01                   # [-] Weight for the yaw time since last observed
        yaw_proximity_weight: 10.0             # [-] Weight for the yaw proximity
        yaw_velocity_weight: 0.1              # [-] Weight for the yaw velocity
        yaw_change_weight: 0.01                # [-] Weight for the yaw change
        final_yaw_weight: 0.0                  # [-] Weight for the final yaw
        cutoff_distance: 10.0                    # [m] Distance to cutoff the yaw optimization
        num_yaw_fit_poly: 6                     # [-] Number of polynomial for the yaw fitting
        yaw_fit_degree: 3                       # [-] Degree of the polynomial for the yaw fitting
        num_samples_collision_likelihood: 10    # [-] Number of samples for the collision likelihood
        num_samples_velocity_score: 10          # [-] Number of samples for the velocity score
        look_ahead_secs_for_dom: 5.0            # [s] Look ahead time for the dynamic obstacle motion
        yaw_optimization_debugging: true        # [-] Debugging the yaw optimization (publishing the yaw sequence, control points, and knots)
        yaw_spinning_threshold: 10              # [-] if the planner keeps failing more than this number, we switch to the spinning mode
        yaw_spinning_dyaw: 0.0                  # [rd/s] Spinning dyaw

        # ROI (region of interest) parameters
        use_roi: false                          # [-] Use region of interest map sharing
        num_roi_agents: 5                       # [-] Number of agents
        num_roi_traj_sample: 5                  # [-] Number of samples for the ROI trajectory
        roi_map_share_buffer: 2.0               # [m] Buffer for the ROI map sharing

        # Simulation env parameters
        force_goal_z: false                     # [-] Force the goal to be at the certain height since Rviz GUI's goal's z is 0
        default_goal_z: 2.0                     # [m] Default goal height
        
        # Debug flags
        global_planner_verbose: false           # debug output
        debug_verbose: false                    # [-] Verbose the debug information
        dist_to_term_g_verbose: false           # [-] Verbose the distance to the terminal goal
        gurobi_verbose: false                   # Verbosity of Gurobi.
        verbose_computation_time: false         # [-] Verbose the computation time

        # Map parameters
        map_buffer: 3.0                         # [m] buffer for goal & A point
        failure_map_buffer_increment: 0.1       # [m] Increment for the failure map buffer - if the planner keeps failing, we increase the buffer size -> map size
        map_buffer_velocity_factor: 1.0         # [-] Factor for the map buffer velocity
        center_shift_factor: 0.5                # [-] Factor for the center shift
        initial_wdx: 15.0                       # [m] Width of the map (should be the same as wdy assumed in trajCallback)
        initial_wdy: 15.0                       # [m] Depth of the map (should be the same as wdx assumed in trajCallback)
        initial_wdz: 5.0                       # [m] Height of the map
        max_wdx: 20.0                           # [m] Maximum width of the map
        max_wdy: 20.0                           # [m] Maximum depth of the map
        max_wdz: 6.0                           # [m] Maximum height of the map
        min_wdx: 15.0                           # [m] Minimum width of the map
        min_wdy: 15.0                           # [m] Minimum depth of the map
        min_wdz: 6.0                           # [m] Minimum height of the map
        lidar_max_range: 10.0                   # [m] Maximum range of the lidar
        use_map_res_adaptation: false            # [-] Use map resolution adaptation
        map_res_adaptation_decrement: 0.1      # [m] Decrement for the map resolution adaptation
        map_res_adaptation_threshold: 10        # [-] If plan fails this many times, we decrease the map resolution by map_res_adaptation_decrement
        dynus_map_res: 0.3              # [m] Resolution of the map
        dynus_map_res_min: 0.3          # [m] Minimum resolution of the map
        octomap_res: 0.3                # [m] Resolution of the octomap [Note: rule of thumb: equal to or smaller than dynus_map_res]
        tmap_update_rate: 20.0          # [Hz] Rate to update the tmap
        
        # Frontiers parameters
        use_only_d435_for_frontiers: true           # [-] Use only D435 for frontiers
        max_z_diff_from_frontier_to_camera: 10.0    # [m] Minimum z difference from the frontier to the camera
        min_dist_from_frontier_to_camera: 3.0      # [m] Minimum distance from the frontier to the camera
        frontier_update_alpha: 0.5                  # [-] Alpha for the frontier update new = alpha * new + (1-alpha) * old
        d435_depth_min: 3.0                        # [m] Minimum depth to cut off the frontiers for the D435
        use_mean_based_best_frontier: false         # [-] Use mean-based best frontier
        no_visible_frontiers_threshold: 10          # [-] Number of no visible frontiers to switch to the exploration mode
        desired_velocity_cost_weight: 100.0          # [-] Weight of the desired velocity cost in the optimization
        dist_from_z_axis_weight: 1000.0                # [-] Weight of the distance from the z axis in the optimization
        dist_to_prev_best_frontier_weight: 0.1    # [-] Weight of the distance to the previous best frontier in the optimization
        positive_z_camera_weight: 1.0             # [-] Weight of the positive z camera in the optimization
        goal_proximity_weight: 0.0                  # [-] Weight of the goal proximity in the optimization
        info_gain_cost_weight: 100.0                 # [-] Weight of the information gain cost in the optimization
        frontier_neighbor_thresh_for_info_gain: 1.0 # [m] Distance threshold for the frontier neighbor to calculate the information gain
        frontier_search_buffer: 2.0                 # [m] Buffer for the frontier search
        frontier_min_known_free_thresh: 1           # [-] Minimum known free threshold for the frontier
        frontier_min_unknown_thresh: 2              # [-] Minimum unknown threshold for the frontier
        
        # Communication delay parameters
        use_comm_delay_inflation: true  # [-] Use communication delay inflation
        comm_delay_inflation_alpha: 0.2 # [-] Alpha for the communication delay inflation
        comm_delay_inflation_max: 0.1   # [m] Maximum communication delay inflation
        comm_delay_filter_alpha: 0.9    # [-] Alpha for the communication delay filter new_comm_delay = alpha * new_comm_delay + (1-alpha) * old_comm_delay

        # Safety check parameters
        safety_check_dt: 0.05            # [s] Discretization time step for the safety check

        # Simultation related parameters
        depth_camera_depth_max: 10.0    # [m] d435 depth in simulation
        fov_visual_depth: 10.0          # [m] FOV visual depth
        fov_visual_x_deg: 76.0          # [deg] FOV visual x degree
        fov_visual_y_deg: 47.0          # [deg] FOV visual y degree

        # Obstacle tracking/prediction parameters
        use_adaptive_kf: true                       # [-] Use adaptive KF
        adaptive_kf_alpha: 0.90                     # [-] Alpha for the adaptive KF (if you set it to 1.0, it becomes a standard KF)
        adaptive_kf_dt: 0.1                         # [s] Time step for the adaptive KF
        cluster_tolerance: 1.0                      # [m] Tolerance for the clustering
        min_cluster_size: 20                        # [-] Minimum cluster pointcloud size
        max_cluster_size: 100                       # [-] Maximum cluster pointcloud size
        prediction_horizon: 0.5                     # [s] Prediction horizon
        prediction_dt: 0.1                          # [s] Time step for the prediction
        time_to_delete_old_obstacles: 5.0           # [s] Time to delete old obstacles
        cluster_bbox_cutoff_size: 2.0               # [m] Size of the bounding box for the clustering
        use_life_time_for_box_visualization: false  # [-] Use life time for the box visualization - if false, we keep the box until the end of the simulation
        box_visualization_duration: 1.0             # [s] Duration to visualize the bounding box
        velocity_threshold: 0.01                     # [m/s] Velocity threshold to characterize as dynamic obstacles
        acceleration_threshold: 0.1                 # [m/s2] Acceleration threshold to characterize as dynamic obstacles

        # Octomap parameters
        use_height_map: false           # [bool] Use height map for insertion
        use_colored_map: false          # [bool] Use colored map for insertion
        color_factor: 0.8               # [double] Factor for map coloring
        point_cloud_min_x: -200.0       # [m] Minimum x coordinate for point cloud
        point_cloud_max_x: 200.0        # [m] Maximum x coordinate for point cloud
        point_cloud_min_y: -200.0       # [m] Minimum y coordinate for point cloud
        point_cloud_max_y: 200.0        # [m] Maximum y coordinate for point cloud
        point_cloud_min_z: -10.0          # [m] Minimum height of points to consider for insertion
        point_cloud_max_z: 10.0         # [m] Maximum height of points to consider for insertion
        filter_speckles: true          # [bool] Enable speckle filtering
        filter_ground_plane: false      # [bool] Enable ground plane filtering
        ground_filter.distance: 0.04    # [m] Distance threshold to consider a point as ground
        ground_filter.angle: 0.15       # [rad] Angular threshold for ground plane filtering
        ground_filter.plane_distance: 0.07  # [m] Plane distance threshold for ground filtering
        use_decay: false                # [bool] Use octomap time decay
        decay_duration: 5.0             # [s] Time to decay the octomap
        sensor_model.occupancy_thres: 0.5 # [probability] Sensor model threshold for occupancy
        sensor_model.hit: 0.51           # [probability] Sensor model probability for a hit
        sensor_model.miss: 0.40          # [probability] Sensor model probability for a miss
        sensor_model.min: 0.12          # [probability] Minimum probability clamp for sensor model
        sensor_model.max: 0.97          # [probability] Maximum probability clamp for sensor model
        compress_map: true              # [bool] Compress the map losslessly
        color.r: 0.0                    # [double] Red channel for map color
        color.g: 0.0                    # [double] Green channel for map color
        color.b: 1.0                    # [double] Blue channel for map color
        color.a: 1.0                    # [double] Alpha channel for map color
        color_free.r: 0.0               # [double] Red channel for free space color
        color_free.g: 1.0               # [double] Green channel for free space color
        color_free.b: 0.0               # [double] Blue channel for free space color
        color_free.a: 0.5               # [double] Alpha channel for free space color
        latched_topics: false           # [bool] Enable latched topics
        publish_free_space: true        # [bool] Publish free space information
        lidar_insert_hz: 5.0            # [Hz] Frequency to insert the lidar point cloud
        depth_camera_insert_hz: 20.0     # [Hz] Frequency to insert the depth camera point cloud

        # Ground robot control gains
        ground_robot_kv: 1.0            # [-] Ground robot velocity gain
        ground_robot_kdist: 2.5         # [-] Ground robot distance gain
        ground_robot_kw: 1.0            # [-] Ground robot angular velocity gain
        ground_robot_kyaw: 2.0          # [-] Ground robot yaw gain
        ground_robot_kalpha: 1.5        # [-] Ground robot alpha gain

        # Quadruped PID gains
        qudruped_kp_x: 2.0              # [-] Quadruped proportional gain for x
        qudruped_ki_x: 0.1              # [-] Quadruped integral gain for x
        qudruped_kd_x: 0.1              # [-] Quadruped derivative gain for x
        qudruped_kp_y: 0.3              # [-] Quadruped proportional gain for y
        qudruped_ki_y: 0.01             # [-] Quadruped integral gain for y
        qudruped_kd_y: 0.3              # [-] Quadruped derivative gain for y

        # Time allocation parameters (single threaded case)
        factor_initial: 2.0                        # [-] Initial factor for the optimization
        factor_final: 3.0                           # [-] Final factor for the optimization
        factor_gamma_up: 1.0                        # [-] Factor for the gamma up
        factor_gamma_down: 0.1                      # [-] Factor for the gamma down
        factor_constant_step_size: 0.1              # [-] Constant step size for the factor
        factor_minimum: 1.5                         # [-] Minimum factor
        factor_delta_step_size: 0.1                 # [-] Delta step for the factor: factor_step_size =  i * factor_delta_step_size. By doing this we can have increasing factor_step_size. (Eg. factor_step_size = [0.0, 0.05, 0.1, 0.15, 0.2, ...]), which leads to factor = [1.0, 1.05, 1.15, 1.3, 1.5, 1.75, ...] since factor = previous_factor + i * factor_step_size)
        use_constant_step_size: false               # [-] Use constant step size for the factor
        count_to_switch_to_constant_step_size: 3    # [-] Count to switch to the constant step size