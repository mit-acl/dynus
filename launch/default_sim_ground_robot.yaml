session_name: multiagent_sim
windows:
  - window_name: main
    layout: tiled
    shell_command_before:
      - source /home/XXXXXXX/code/dynus_ws/install/setup.bash # TODO: hard-coded path
    panes:
      # base station
      - ros2 launch dynus base_dynus.launch.py use_dyn_obs:=false use_gazebo_gui:=false use_rviz:=true use_ground_robot:=true

      - shell_command:
        - sleep 10
        - ros2 launch dynus onboard_dynus.launch.py x:=-45.0 y:=0.0 z:=0.0 yaw:=0 namespace:=NX01 use_ground_robot:=true # ground robot
      # - shell_command: # DLIO
      #   - sleep 15
      #   - ros2 launch direct_lidar_inertial_odometry dlio.launch.py rviz:=false pointcloud_topic:=/NX01/mid360_PointCloud2 imu_topic:=/NX01_livox_imu/out namespace:=NX01
      
      # NX02
      # - shell_command:
      #   - sleep 20
      #   - ros2 launch dynus onboard_dynus.launch.py x:=0.0 y:=7.0 z:=1.5 yaw:=-90 namespace:=NX02
        # - ros2 launch dynus onboard_dynus.launch.py x:=-2.0 y:=-5.5 z:=1.0 yaw:=90 namespace:=NX02 use_obstacle_tracker:=true
      
      # NX03
      # - shell_command:
      #   - sleep 10
      #   - ros2 launch dynus onboard_dynus.launch.py x:=35.0 y:=10.0 z:=4.0 namespace:=NX03 use_obstacle_tracker:=true
      
      # goal sender
      # - shell_command:
      #   - sleep 60 && ros2 launch dynus goal_sender.launch.py
      # - shell_command:
        # - sleep 30
        # - ros2 topic pub --once /NX01/start_exploration std_msgs/msg/Empty "{}"

      # PCL object detection (didn't work well with livox lidar)
      # - sleep 10 && ros2 launch pcl_object_detection pcl_object_detection_launch.launch.py namespace:=NX01